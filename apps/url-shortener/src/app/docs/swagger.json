{
  "openapi": "3.1.0",
  "info": {
    "title": "URL Shortener API",
    "description": "Multi-tenant URL shortening service with user management and authentication capabilities. This API allows for creating shortened URLs, managing users, and handling multi-tenant operations.",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@urlshortener.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "API Gateway"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from /auth/token endpoint"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password",
          "tenantId"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 1,
            "description": "User's password",
            "example": "strongPassword123"
          },
          "tenantId": {
            "type": "string",
            "minLength": 1,
            "description": "Tenant identifier",
            "example": "123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "object",
            "properties": {
              "sub": {
                "type": "string",
                "description": "User ID",
                "example": "123"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "example": "user@example.com"
              },
              "role": {
                "type": "string",
                "description": "User's role",
                "example": "USER"
              },
              "tenantId": {
                "type": "string",
                "description": "Tenant ID",
                "example": "123"
              },
              "exp": {
                "type": "number",
                "description": "Token expiration timestamp",
                "example": 1735689600
              }
            }
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "required": [
          "email",
          "password",
          "tenantId"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "newuser@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 1,
            "description": "User's password (will be hashed)",
            "example": "securePassword123"
          },
          "tenantId": {
            "type": "string",
            "minLength": 1,
            "description": "Tenant identifier",
            "example": "123"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "New email address",
            "example": "updated@example.com"
          }
        }
      },
      "UpdateRoleRequest": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER",
              "TENANT_ADMIN"
            ],
            "description": "New role for the user",
            "example": "TENANT_ADMIN"
          }
        }
      },
      "CreateTenantRequest": {
        "type": "object",
        "required": [
          "name",
          "subDomain"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Tenant name",
            "example": "Example Company"
          },
          "subDomain": {
            "type": "string",
            "minLength": 1,
            "description": "Tenant subdomain",
            "example": "example-company"
          }
        }
      },
      "UpdateTenantRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "New tenant name",
            "example": "Updated Company Name"
          }
        }
      },
      "CreateUrlRequest": {
        "type": "object",
        "required": [
          "originalUrl"
        ],
        "properties": {
          "originalUrl": {
            "type": "string",
            "format": "uri",
            "description": "Original URL to be shortened",
            "example": "https://www.example.com/very/long/url/path"
          }
        }
      },
      "UpdateUrlRequest": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "New URL to replace the original",
            "example": "https://www.example.com/updated/url"
          }
        }
      },
      "UrlResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "URL record identifier",
            "example": "123"
          },
          "shortCode": {
            "type": "string",
            "description": "Generated short code",
            "example": "abc123"
          },
          "originalUrl": {
            "type": "string",
            "description": "Original long URL",
            "example": "https://www.example.com/very/long/url/path"
          }
        }
      },
      "UrlCreationResponse": {
        "type": "object",
        "properties": {
          "urlId": {
            "type": "string",
            "description": "Created URL identifier",
            "example": "123"
          },
          "shortUrl": {
            "type": "string",
            "description": "Generated short URL",
            "example": "http://short.url/abc123"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Invalid input data"
          },
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Bad Request"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Error timestamp",
            "example": "2024-01-01T12:00:00Z"
          },
          "path": {
            "type": "string",
            "description": "Request path",
            "example": "/api/url"
          }
        }
      },
      "ValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string",
                      "example": "email"
                    },
                    "message": {
                      "type": "string",
                      "example": "must be a valid email"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication information is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "statusCode": 401,
              "message": "Unauthorized access",
              "error": "Unauthorized",
              "timestamp": "2024-01-01T12:00:00Z",
              "path": "/api/url"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Invalid input data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "The requested resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "statusCode": 404,
              "message": "Resource not found",
              "error": "Not Found",
              "timestamp": "2024-01-01T12:00:00Z",
              "path": "/api/url/123"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/auth/token": {
      "post": {
        "summary": "Login user",
        "description": "Authenticate user and receive JWT token for subsequent requests",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/claims": {
      "get": {
        "summary": "Get user claims",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User claims retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/user": {
      "post": {
        "summary": "Create new user",
        "tags": [
          "User Management"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/user/{id}": {
      "put": {
        "summary": "Update user",
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/role": {
      "put": {
        "summary": "Update user role",
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/tenant": {
      "post": {
        "summary": "Create new tenant",
        "tags": [
          "Tenant Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tenant created successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/tenant/{id}": {
      "put": {
        "summary": "Update tenant",
        "tags": [
          "Tenant Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant updated successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Tenant not found"
          }
        }
      },
      "delete": {
        "summary": "Delete tenant",
        "tags": [
          "Tenant Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Tenant not found"
          }
        }
      }
    },
    "/url": {
      "post": {
        "summary": "Create short URL",
        "tags": [
          "URL Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUrlRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "URL shortened successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UrlCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/urls": {
      "get": {
        "summary": "Get user's URLs",
        "tags": [
          "URL Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "URLs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UrlResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/url/{urlId}": {
      "patch": {
        "summary": "Update URL",
        "tags": [
          "URL Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "urlId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "URL updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UrlResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "URL not found"
          }
        }
      },
      "delete": {
        "summary": "Delete URL",
        "tags": [
          "URL Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "urlId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "URL deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "URL not found"
          }
        }
      }
    },
    "/url/{shortCode}": {
      "get": {
        "summary": "Get original URL",
        "tags": [
          "URL Management"
        ],
        "parameters": [
          {
            "name": "shortCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Original URL retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "originalUrl": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "URL not found"
          }
        }
      }
    },
    "/url/count-access/{shortCode}": {
      "get": {
        "summary": "Count URL access",
        "tags": [
          "URL Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "shortCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access counted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "URL not found"
          }
        }
      }
    },
    "/iam/health": {
      "get": {
        "summary": "IAM Service Health Check",
        "tags": ["Health Checks"],
        "responses": {
          "200": {
            "description": "IAM Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/url/health": {
      "get": {
        "summary": "URL Service Health Check",
        "tags": ["Health Checks"],
        "responses": {
          "200": {
            "description": "URL Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/url/info/{shortCode}": {
      "get": {
        "summary": "Get URL information",
        "tags": ["URL Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "shortCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Short code of the URL"
          }
        ],
        "responses": {
          "200": {
            "description": "URL information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "URL record identifier"
                    },
                    "shortCode": {
                      "type": "string",
                      "description": "Short code of the URL"
                    },
                    "originalUrl": {
                      "type": "string",
                      "description": "Original long URL"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Creation timestamp"
                    },
                    "accessCount": {
                      "type": "integer",
                      "description": "Number of times the URL was accessed"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "URL not found"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and token management"
    },
    {
      "name": "User Management",
      "description": "Create, update, and manage user accounts and roles"
    },
    {
      "name": "Tenant Management",
      "description": "Multi-tenant operations including creation and management of tenants"
    },
    {
      "name": "URL Management",
      "description": "URL shortening operations including creation, updates, and analytics"
    },
    {
      "name": "Health Checks",
      "description": "Service health check endpoints"
    }
  ]
}